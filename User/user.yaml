swagger: '2.0'
info:
  version: 1.0.0
  title: cook4you API
  # put the contact info for your development or API team
  contact:
    email: zerg1996@yandex.ru

  description: "Это структура API. Из-за требований к ключам доступа, функции выполнения запроса не работают. "

# tags are used for organizing operations
tags:
  - name: User app
    description: Запросы необходимые для приложения пользователя
  - name: Help
    description: Вспомогательные запросы

schemes:
  - "https"


consumes:
  - "application/json"
produces:
  - "application/json"

paths:
  /user/order_possibility:
    get:
      tags:
        - "Help"
      summary: "Проверка возможности заказа блюда"
      operationId: "order_possibility"
      description: "Вызов запроса на посылку смс на указанный номер; в смс будет 6-значный код; запрос стоит денег - не спамьте им"
      parameters:
        - in: "query"
          name: city_street_building
          type: string
          required: true
        - in: "query"
          name: dishes
          type: string
          format: uuid
          required: true
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: object
            required:
              - "kitchen"
              - "dishes"
            properties:
              kitchen:
                type: string
                format: uuid
              dishes:
                type: array
                items:
                  type: string
                  format: uuid

  /user/one_time_password:
    get:
      tags:
        - "Help"
      summary: "Получение одноразового 6-значного пароля"
      operationId: "one_time_password"
      description: "Вызов запроса на посылку смс на указанный номер; в смс будет 6-значный код; запрос стоит денег - не спамьте им"
      parameters:
        - in: "query"
          name: phone
          type: string
          required: true
      responses:
        200:
          description: "Успешный запрос"


  /user/check_unique_data:
    get:
      tags:
        - "Help"
      summary: "Проверка уникальности пользовательской информации"
      operationId: "check_unique_data"
      description: "Проверяет есть ли пользователь с данной информацией"
      parameters:
        - in: "query"
          name: phone
          type: string
          required: true
        - in: "query"
          name: login
          type: string
          required: true
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: object
                required:
                  - "ok"
                  - "login_exist"
                  - "phone_exist"
                properties:
                  ok:
                    type: boolean
                    description: "В случае если логин и телефон свободный - значение true, иначе - false"
                    example: false
                  login_exist:
                    type: boolean
                  phone_exist:
                    type: boolean

  /user/login:
    get:
      tags:
        - "Help"
      summary: "Проверка на корректность пароля пользователя по его логину или телефону"
      operationId: "login"
      parameters:
        - in: "query"
          name: phone
          type: string
        - in: "query"
          name: login
          type: string
        - in: "query"
          name: password
          type: string
          required: true
        - in: "query"
          name: otp
          type: string
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: object
                required:
                  - "ok"
                properties:
                  ok:
                    type: boolean
                    description: "Корректен ли пароль или нет"
                    example: false

  /user/orders:
    get:
      tags:
        - "User app"
      summary: "Получение списка заказов"
      operationId: "user_app_get_order"
      parameters:
        - in: query
          name: customer
          type: string
          format: uuid
          required: true
          description: "ID пользователя для которого вернуть его заказы"
      responses:
        200:
          description: "Заказы пользователя с его id"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/order.yaml#/order"
    post:
      tags:
        - "User app"
      summary: "Добавление заказа"
      operationId: "post_order"
      parameters:
        - in: "body"
          name: "body"
          description: "Добавить заказ пользователя"
          required: true
          schema:
            $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/order.yaml#/post_order"
      responses:
        201:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/order.yaml#/order"

  /user/customers:
    get:
      tags:
        - "User app"
      summary: "Получение информации о пользователе"
      description: "В качестве параметров - информация по которой будет искаться пользователь, хотя бы одно из полей обязательно."
      operationId: "customers"
      parameters:
        - in: query
          name: phone
          type: string
          format: string
        - in: query
          name: login
          type: string
      responses:
        200:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/customer.yaml#/customer"
    post:
      tags:
        - "User app"
      summary: "Записать свою информацию"
      operationId: "post_customer"
      parameters:
        - in: query
          name: otp
          type: string
          required: true
          description: "6 значный ключ корректный одну минуту, для тестирования - ключ 'test' корректен всегда"
        - in: "body"
          name: "body"
          description: "Информация о пользователе"
          required: true
          schema:
            $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/customer.yaml#/post_customer"
      responses:
        201:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/customer.yaml#/customer"
    put:
      tags:
        - "User app"
      summary: "Пользователь изменяет информацию о себе"
      description: "Изменяет информацию о пользователе, в случае изменения phone требуется корректный otp"
      operationId: "put_customer"
      parameters:
        - in: query
          name: otp
          type: string
          required: true
          description: "6 значный ключ корректный одну минуту, для тестирования - ключ 'test' корректен всегда"
        - in: "body"
          name: "body"
          description: "Можно изменять все - кроме id. Соотвественно поля которые менять не надо - в тело запроса добавлять не надо."
          schema:
            $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/customer.yaml#/post_customer"
          required: true
      responses:
        201:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/customer.yaml#/customer"

  /user/dishes:
    get:
      tags:
        - "User app"
      summary: "Получение спика блюд кухни"
      description: "Возвращает блюда которые доступны на данной кухне, если параметры не заполнены - возвращает все"
      operationId: "dishes"
      parameters:
        - in: query
          name: kitchens
          required: true
          type: string
          format: uuid
          description: "id кухни для которой получить блюда"
      responses:
        200:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/dish.yaml#/dish"

  /user/kitchens:
    get:
      tags:
        - "User app"
      summary: "Получение кухни"
      description: "Получение кухни по адресу"
      operationId: "kitchens"
      parameters:
        - in: query
          required: true
          name: city_street_building
          type: string
          description: "Адрес по которому вернуть кухню"
      responses:
        200:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/kitchen.yaml#/kitchen"

  /user/cuisines:
    get:
      tags:
        - "User app"
      summary: "Получение списка видов кухнь"
      description: "Возвращает список видов всех кухонь с описанием"
      operationId: "cuisines"
      responses:
        200:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/cuisine.yaml#/cuisine"

  /user/sections_content:
    get:
      tags:
        - "User app"
      summary: "Получение списка секций и их названий"
      description: ""
      operationId: "sections_content"
      responses:
        200:
          description: "Запрос выполен успешно"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/sections_content.yaml#/sections_content"

  /user/items:
    get:
      tags:
        - "User app"
      summary: "Получение списка ингридиентов"
      description: "Получение списка ингридиентов"
      operationId: "items"
      responses:
        200:
          description: "Получить ингридиенты на данных кухнях или кухне"
          schema:
            type: object
            required:
              - "result"
            properties:
              result:
                type: array
                items:
                  $ref: "https://raw.githubusercontent.com/Zerg1996/Swagger/master/User/item.yaml#/item"


# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /alalmoskvin/cook4you.user/1.0.0